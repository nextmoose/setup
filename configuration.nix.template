{ config, pkgs, ... }:
{
  imports = [
    ./hardware-configuration.nix
  ];
  boot.initrd.network = {
    enable = true;
    ssh = {
      enable = true;
      authorizedKeys = [
        "AUTHORIZED_KEY_PUBLIC"
      ];
    };
  };
  boot.initrd.preDeviceCommands = ''
    echo BEGIN PRE_DEVICE_COMMAND &&
      echo Shell commands to be executed before udev is started to create device nodes. &&
      echo THIS IS NUMBER ONE. &&
      echo THIS IS WHERE THE DISK WILL BE UNLOCKED. &&
      echo ifconfig lo: 127.0.0.2 netmask 255.0.0.0 up &&
      time ifconfig lo: 127.0.0.2 netmask 255.0.0.0 up &&
      echo ifconfig &&
      time ifconfig &&
      echo END PRE_DEVICE_COMMAND
  '';
  boot.initrd.postDeviceCommands = ''
    echo BEGIN POST_DEVICE_COMMAND &&
      echo Shell commands to be executed immediately after stage 1 of the boot has loaded kernel modules and created device nodes in /dev. &&
      echo THIS IS TOO LATE. &&
      echo END POST_DEVICE_COMMAND
  '';
  boot.initrd.postMountCommands = ''
    echo BEGIN POST_MOUNT_COMMAND &&
      echo Shell commands to be executed immediately after the stage 1 filesystems have been mounted. &&
      echo THIS IS TOO LATE. &&
      echo END POST_MOUNT_COMMAND
  '';
  boot.initrd.preLVMCommands = ''
    echo BEGIN PRE_LVM_COMMAND &&
      echo Shell commands to be executed immediately before LVM discovery. &&
      echo THIS IS TOO LATE. &&
      echo END PRE_LVM_COMMAND
  '';
  boot.initrd.preFailCommands = ''
    echo BEGIN PRE_FAIL_COMMAND &&
      echo Shell commands to be executed before the failure prompt is shown. &&
      echo THIS IS TOO LATE. &&
      echo END PRE_FAIL_COMMAND
  '';
  networking.useDHCP = true;
  boot.initrd.kernelModules = [ "r8169" ];
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  services = {
    openssh = {
      enable = true;
      forwardX11 = true;
    };
    xserver = {
      enable = true;
      windowManager.i3.enable = true;
      libinput.enable = true;
    };
  };
  security.sudo.wheelNeedsPassword = false;
  users.mutableUsers = false;
  users.extraUsers.user = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "wheel" ];
    hashedPassword = "HASHED_PASSWORD";
    packages = [
      (import ./custom/secrets/default.nix { inherit pkgs; })
    ];
    openssh.authorizedKeys.keys = [
      "AUTHORIZED_KEY_PUBLIC"
    ];
  };
  system.stateVersion = "18.03";
}
